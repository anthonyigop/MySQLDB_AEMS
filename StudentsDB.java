/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mysql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ACER
 */
public class StudentsDB extends javax.swing.JFrame {

    String selectedvalue;
    String userInput;
    DefaultTableModel model;

    /**
     * Creates new form StudentsDB
     */
    public StudentsDB() {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();

        LoadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        N = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Ag = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Ad = new javax.swing.JTextField();
        Add = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        E = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Dob = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        M = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Add1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        textfield = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        ED = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        idc = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Name");

        N.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Age");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Address");

        Add.setText("ADD");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Email");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Date_of_birth (YY/MM/DD)");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Major");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "idStudents", "Name", " Age", "Address", "Email", "Date_of_birth", "Major", "EnrollmentDate", "course_idCourses"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        Add1.setText("CLEAR ALL");
        Add1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add1ActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Name", "Age", "Address", "Email", "Date_of_birth", "Major", "Course (ID)" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        textfield.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
        textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textfieldActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Update.setText("UPDATE");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Delete.setText("DELETE");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("EnrollmentDate");

        ED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EDActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Course (ID)");

        idc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idcActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("STUDENTS");
        jLabel1.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jLabel1ComponentAdded(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(683, 683, 683)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(N)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Ag)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(Dob)
                        .addComponent(E)
                        .addComponent(Ad)
                        .addComponent(M, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ED, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idc, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 954, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(64, 64, 64)
                            .addComponent(textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(62, 62, 62)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Add1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(101, 101, 101))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(N, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Ag, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Ad, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(E, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Dob, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(M, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ED, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(idc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Add1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jLabel1ComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1ComponentAdded

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed

        try {
            DB_connection.init();
            PreparedStatement ps;
            Connection c = DB_connection.getConnection();
            ResultSet rs;

            ps = c.prepareStatement("Insert into mydb.students (Name, Age, Address, Email, Date_of_birth, Major, EnrollmentDate, course_idCourses) values('" + N.getText() + "','" + Ag.getText() + "','" + Ad.getText() + "','" + E.getText() + "','" + Dob.getText() + "','" + M.getText() + "','" + ED.getText() + "','" + idc.getText() + "')");

            if (!ps.execute()) {
                JOptionPane.showMessageDialog(this, "Successfuly Saved");
                LoadData();
            }

        } catch (SQLException ex) {
            Logger.getLogger(StudentsDB.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_AddActionPerformed

    private void Add1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add1ActionPerformed
        N.setText(" ");
        Ag.setText(" ");
        Ad.setText(" ");
        E.setText(" ");
        Dob.setText(" ");
        M.setText(" ");
        ED.setText(" ");
        idc.setText(" ");
    }//GEN-LAST:event_Add1ActionPerformed

    private void NActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        selectedvalue = jComboBox1.getSelectedItem().toString();

        //  jTextArea2.setText(selectedvalue);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void textfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textfieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            DB_connection.init();
            Connection c = DB_connection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            model.setRowCount(0);
            String user = textfield.getText();
            String query = "";

            switch (selectedvalue) {
                case "Name":
                    query = "SELECT * FROM mydb.students WHERE Name LIKE ?";
                    ps = c.prepareStatement(query);
                    ps.setString(1, "%" + user + "%");
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        model.addRow(new Object[]{
                            rs.getString("Name"),
                            rs.getString("Age"),
                            rs.getString("Address"),
                            rs.getString("Email"),
                            rs.getString("Date_of_birth"),
                            rs.getString("Major"),
                            rs.getString("EnrollmentDate"),
                            rs.getString("course_idCourses")
                        });
                    }
                    LoadData();
                    break;

                case "Age":
                    query = "SELECT * FROM mydb.students WHERE Age LIKE ?";
                    ps = c.prepareStatement(query);
                    ps.setString(1, "%" + user + "%");
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        model.addRow(new Object[]{
                            rs.getString("Name"),
                            rs.getString("Age"),
                            rs.getString("Address"),
                            rs.getString("Email"),
                            rs.getString("Date_of_birth"),
                            rs.getString("Major"),
                            rs.getString("EnrollmentDate"),
                            rs.getString("course_idCourses")
                        });
                    }
                    LoadData();
                    break;

                case "Email":
                    query = "SELECT * FROM mydb.students WHERE Email LIKE ?";
                    ps = c.prepareStatement(query);
                    ps.setString(1, "%" + user + "%");
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        model.addRow(new Object[]{
                            rs.getString("Name"),
                            rs.getString("Age"),
                            rs.getString("Address"),
                            rs.getString("Email"),
                            rs.getString("Date_of_birth"),
                            rs.getString("Major"),
                            rs.getString("EnrollmentDate"),
                            rs.getString("course_idCourses")
                        });
                    }
                    LoadData();
                    break;

                case "Date_of_birth":
                    query = "SELECT * FROM mydb.students WHERE Date_of_birth LIKE ?";
                    ps = c.prepareStatement(query);
                    ps.setString(1, "%" + user + "%");
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        model.addRow(new Object[]{
                            rs.getString("Name"),
                            rs.getString("Age"),
                            rs.getString("Address"),
                            rs.getString("Email"),
                            rs.getString("Date_of_birth"),
                            rs.getString("Major"),
                            rs.getString("EnrollmentDate"),
                            rs.getString("course_idCourses")
                        });
                    }
                    LoadData();
                    break;

                case "Address":
                    query = "SELECT * FROM mydb.students WHERE Address LIKE ?";
                    ps = c.prepareStatement(query);
                    ps.setString(1, "%" + user + "%");
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        model.addRow(new Object[]{
                            rs.getString("Name"),
                            rs.getString("Age"),
                            rs.getString("Address"),
                            rs.getString("Email"),
                            rs.getString("Date_of_birth"),
                            rs.getString("Major"),
                            rs.getString("EnrollmentDate"),
                            rs.getString("course_idCourses")
                        });
                    }
                    LoadData();
                    break;

                case "Major":
                    query = "SELECT * FROM mydb.students WHERE Major LIKE ?";
                    ps = c.prepareStatement(query);
                    ps.setString(1, "%" + user + "%");
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        model.addRow(new Object[]{
                            rs.getString("Name"),
                            rs.getString("Age"),
                            rs.getString("Address"),
                            rs.getString("Email"),
                            rs.getString("Date_of_birth"),
                            rs.getString("Major"),
                            rs.getString("EnrollmentDate"),
                            rs.getString("course_idCourses")
                        });
                    }
                    LoadData();
                    break;

                case "EnrollmentDate":
                    query = "SELECT * FROM mydb.students WHERE EnrollmentDate LIKE ?";
                    ps = c.prepareStatement(query);
                    ps.setString(1, "%" + user + "%");
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        model.addRow(new Object[]{
                            rs.getString("Name"),
                            rs.getString("Age"),
                            rs.getString("Address"),
                            rs.getString("Email"),
                            rs.getString("Date_of_birth"),
                            rs.getString("Major"),
                            rs.getString("EnrollmentDate"),
                            rs.getString("course_idCourses")
                        });
                    }
                    LoadData();
                    break;
                    
                    
                 case "course_idCourses":
                    query = "SELECT * FROM mydb.students WHERE course_idCourses LIKE ?";
                    ps = c.prepareStatement(query);
                    ps.setString(1, "%" + user + "%");
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        model.addRow(new Object[]{
                            rs.getString("Name"),
                            rs.getString("Age"),
                            rs.getString("Address"),
                            rs.getString("Email"),
                            rs.getString("Date_of_birth"),
                            rs.getString("Major"),
                            rs.getString("EnrollmentDate"),
                            rs.getString("course_idCourses")
                        });
                    }
                    LoadData();
                    break;

                default:
                    break;
            }
        } catch (SQLException ex) {
            Logger.getLogger(StudentsDB.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed

        try {
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {
            String idStudents = model.getValueAt(selectedRow, 0).toString(); // Assuming idStudents is in the first column
            String newName = N.getText();
            String newAge = Ag.getText();
            String newAddress = Ad.getText();
            String newEmail = E.getText();
            String newDob = Dob.getText();
            String newMajor = M.getText();
            String newEnrollmentDate = ED.getText();
            String newcourse = idc.getText();

            DB_connection.init();
            Connection c = DB_connection.getConnection();
            
            String query = "UPDATE mydb.students SET Name = ?, Age = ?, Address = ?, Email = ?, Date_of_birth = ?, Major = ?, EnrollmentDate = ?, course_idCourses = ? WHERE idStudents = ?";
            PreparedStatement ps = c.prepareStatement(query);
            ps.setString(1, newName);
            ps.setString(2, newAge);
            ps.setString(3, newAddress);
            ps.setString(4, newEmail);
            ps.setString(5, newDob);
            ps.setString(6, newMajor);
            ps.setString(7, newEnrollmentDate);
            ps.setString(8, newcourse);
            ps.setString(9, idStudents); 

            int rowsUpdated = ps.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Successfully Updated");
                LoadData();
            } else {
                JOptionPane.showMessageDialog(this, "Update Failed");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No row selected for update");
        }

    } catch (SQLException ex) {
        Logger.getLogger(StudentsDB.class.getName()).log(Level.SEVERE, null, ex);
    }

    }//GEN-LAST:event_UpdateActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int row = jTable1.getSelectedRow();
        if (row != -1) {
    String idStudents = model.getValueAt(row, 0).toString();
    String Name = model.getValueAt(row, 1).toString();
    String Age = model.getValueAt(row, 2).toString();
    String Address = model.getValueAt(row, 3).toString();
    String Email = model.getValueAt(row, 4).toString();
    String Date_of_birth = model.getValueAt(row, 5).toString();
    String Major = model.getValueAt(row, 6).toString();
    String EnrollmentDate = model.getValueAt(row, 7).toString();
    String course_idCourses = model.getValueAt(row, 8).toString();

    N.setText(Name);
    Ag.setText(Age);
    Ad.setText(Address);
    E.setText(Email);
    Dob.setText(Date_of_birth);
    M.setText(Major);
    ED.setText(EnrollmentDate);
    idc.setText(course_idCourses);
        }
    }


    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int row = jTable1.getSelectedRow();
        if (row != -1) {
            model.removeRow(row);
        } else {
            JOptionPane.showMessageDialog(null, "No row selected to delete");
        }

    }//GEN-LAST:event_jTable1MouseClicked

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed

        try {
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {
            String idStudents = model.getValueAt(selectedRow, 0).toString(); 

            DB_connection.init();
            Connection c = DB_connection.getConnection();
            
            String query = "DELETE FROM mydb.students WHERE idStudents = ?";
            PreparedStatement ps = c.prepareStatement(query);
            ps.setString(1, idStudents);

            int rowsDeleted = ps.executeUpdate();

            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Successfully Deleted");
                LoadData();
            } else {
                JOptionPane.showMessageDialog(this, "Delete Failed");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No row selected for deletion");
        }

    } catch (SQLException ex) {
        Logger.getLogger(StudentsDB.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_DeleteActionPerformed

    private void EDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EDActionPerformed

    private void idcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idcActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentsDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentsDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentsDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentsDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentsDB().setVisible(true);
            }
        });
    }

    void LoadData() {
        try {
            DB_connection.init();
            Connection c = DB_connection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            model.setRowCount(0);
            String userInput = textfield.getText(); // Get the input from the textfield
            String query = "SELECT * FROM mydb.students WHERE Name LIKE ? OR Age LIKE ? OR Address LIKE ? OR Email LIKE ? OR Date_of_birth LIKE ? OR Major LIKE ? OR EnrollmentDate LIKE ? OR course_idCourses LIKE ?";
            ps = c.prepareStatement(query);
            String searchPattern = "%" + userInput + "%";
            ps.setString(1, searchPattern);
            ps.setString(2, searchPattern);
            ps.setString(3, searchPattern);
            ps.setString(4, searchPattern);
            ps.setString(5, searchPattern);
            ps.setString(6, searchPattern);
            ps.setString(7, searchPattern);
            ps.setString(8, searchPattern);
            rs = ps.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("idstudents"),
                    rs.getString("Name"),
                    rs.getString("Age"),
                    rs.getString("Address"),
                    rs.getString("Email"),
                    rs.getString("Date_of_birth"),
                    rs.getString("Major"),
                    rs.getString("EnrollmentDate"),
                    rs.getString("course_idCourses")
                });
            }
        } catch (SQLException ex) {
            Logger.getLogger(StudentsDB.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Ad;
    private javax.swing.JButton Add;
    private javax.swing.JButton Add1;
    private javax.swing.JTextField Ag;
    private javax.swing.JButton Delete;
    private javax.swing.JTextField Dob;
    private javax.swing.JTextField E;
    private javax.swing.JTextField ED;
    private javax.swing.JTextField M;
    private javax.swing.JTextField N;
    private javax.swing.JButton Update;
    private javax.swing.JTextField idc;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField textfield;
    // End of variables declaration//GEN-END:variables
}
